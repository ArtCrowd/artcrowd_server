swagger: '2.0'
info:
  version: 1.0.0
  title: artcrowd_server
basePath: /api
paths:
  /GeoLocations:
    post:
      tags:
        - GeoLocation
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GeoLocation.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
    patch:
      tags:
        - GeoLocation
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: GeoLocation.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
    put:
      tags:
        - GeoLocation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: GeoLocation.replaceOrCreate__put_GeoLocations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
    get:
      tags:
        - GeoLocation
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GeoLocation.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GeoLocation'
      deprecated: false
  /GeoLocations/replaceOrCreate:
    post:
      tags:
        - GeoLocation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: GeoLocation.replaceOrCreate__post_GeoLocations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
  /GeoLocations/upsertWithWhere:
    post:
      tags:
        - GeoLocation
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: GeoLocation.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
  '/GeoLocations/{id}/exists':
    get:
      tags:
        - GeoLocation
      summary: Check whether a model instance exists in the data source.
      operationId: 'GeoLocation.exists__get_GeoLocations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GeoLocations/{id}':
    head:
      tags:
        - GeoLocation
      summary: Check whether a model instance exists in the data source.
      operationId: 'GeoLocation.exists__head_GeoLocations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GeoLocation
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GeoLocation.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
    put:
      tags:
        - GeoLocation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'GeoLocation.replaceById__put_GeoLocations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
    delete:
      tags:
        - GeoLocation
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GeoLocation.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GeoLocation
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: GeoLocation.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: GeoLocation id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
  '/GeoLocations/{id}/replace':
    post:
      tags:
        - GeoLocation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'GeoLocation.replaceById__post_GeoLocations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
  /GeoLocations/findOne:
    get:
      tags:
        - GeoLocation
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GeoLocation.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GeoLocation'
      deprecated: false
  /GeoLocations/update:
    post:
      tags:
        - GeoLocation
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GeoLocation.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GeoLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GeoLocations/count:
    get:
      tags:
        - GeoLocation
      summary: Count instances of the model matched by where from the data source.
      operationId: GeoLocation.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GeoLocations/change-stream:
    post:
      tags:
        - GeoLocation
      summary: Create a change stream.
      operationId: GeoLocation.createChangeStream__post_GeoLocations_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - GeoLocation
      summary: Create a change stream.
      operationId: GeoLocation.createChangeStream__get_GeoLocations_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Categories:
    post:
      tags:
        - Category
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Category.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    patch:
      tags:
        - Category
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Category.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    put:
      tags:
        - Category
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Category.replaceOrCreate__put_Categories
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    get:
      tags:
        - Category
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Category.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
      deprecated: false
  /Categories/replaceOrCreate:
    post:
      tags:
        - Category
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Category.replaceOrCreate__post_Categories_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  /Categories/upsertWithWhere:
    post:
      tags:
        - Category
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Category.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  '/Categories/{id}/exists':
    get:
      tags:
        - Category
      summary: Check whether a model instance exists in the data source.
      operationId: 'Category.exists__get_Categories_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Categories/{id}':
    head:
      tags:
        - Category
      summary: Check whether a model instance exists in the data source.
      operationId: 'Category.exists__head_Categories_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Category
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Category.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    put:
      tags:
        - Category
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Category.replaceById__put_Categories_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    delete:
      tags:
        - Category
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Category.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Category
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Category.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  '/Categories/{id}/replace':
    post:
      tags:
        - Category
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Category.replaceById__post_Categories_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  /Categories/findOne:
    get:
      tags:
        - Category
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Category.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  /Categories/update:
    post:
      tags:
        - Category
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Category.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Categories/count:
    get:
      tags:
        - Category
      summary: Count instances of the model matched by where from the data source.
      operationId: Category.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Categories/change-stream:
    post:
      tags:
        - Category
      summary: Create a change stream.
      operationId: Category.createChangeStream__post_Categories_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Category
      summary: Create a change stream.
      operationId: Category.createChangeStream__get_Categories_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Artists/{id}/accessTokens/{fk}':
    get:
      tags:
        - Artist
      summary: Find a related item by id for accessTokens.
      operationId: Artist.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Artist
      summary: Delete a related item by id for accessTokens.
      operationId: Artist.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Artist
      summary: Update a related item by id for accessTokens.
      operationId: Artist.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Artists/{id}/accessTokens':
    get:
      tags:
        - Artist
      summary: Queries accessTokens of Artist.
      operationId: Artist.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Artist
      summary: Creates a new instance in accessTokens of this model.
      operationId: Artist.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Artist
      summary: Deletes all accessTokens of this model.
      operationId: Artist.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Artists/{id}/accessTokens/count':
    get:
      tags:
        - Artist
      summary: Counts accessTokens of Artist.
      operationId: Artist.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Artists:
    post:
      tags:
        - Artist
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Artist.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
    patch:
      tags:
        - Artist
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Artist.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
    put:
      tags:
        - Artist
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Artist.replaceOrCreate__put_Artists
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
    get:
      tags:
        - Artist
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Artist.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Artist'
      deprecated: false
  /Artists/replaceOrCreate:
    post:
      tags:
        - Artist
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Artist.replaceOrCreate__post_Artists_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
  /Artists/upsertWithWhere:
    post:
      tags:
        - Artist
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Artist.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
  '/Artists/{id}/exists':
    get:
      tags:
        - Artist
      summary: Check whether a model instance exists in the data source.
      operationId: 'Artist.exists__get_Artists_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Artists/{id}':
    head:
      tags:
        - Artist
      summary: Check whether a model instance exists in the data source.
      operationId: 'Artist.exists__head_Artists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Artist
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Artist.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
    put:
      tags:
        - Artist
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Artist.replaceById__put_Artists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
    delete:
      tags:
        - Artist
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Artist.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Artist
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Artist.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
  '/Artists/{id}/replace':
    post:
      tags:
        - Artist
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Artist.replaceById__post_Artists_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
  /Artists/findOne:
    get:
      tags:
        - Artist
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Artist.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Artist'
      deprecated: false
  /Artists/update:
    post:
      tags:
        - Artist
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Artist.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Artist'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Artists/count:
    get:
      tags:
        - Artist
      summary: Count instances of the model matched by where from the data source.
      operationId: Artist.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Artists/change-stream:
    post:
      tags:
        - Artist
      summary: Create a change stream.
      operationId: Artist.createChangeStream__post_Artists_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Artist
      summary: Create a change stream.
      operationId: Artist.createChangeStream__get_Artists_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Artists/login:
    post:
      tags:
        - Artist
      summary: Login a user with username/email and password.
      operationId: Artist.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Artists/logout:
    post:
      tags:
        - Artist
      summary: Logout a user with access token.
      operationId: Artist.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Artists/{id}/verify':
    post:
      tags:
        - Artist
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Artist.prototype.verify
      parameters:
        - name: id
          in: path
          description: Artist id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Artists/confirm:
    get:
      tags:
        - Artist
      summary: Confirm a user registration with identity verification token.
      operationId: Artist.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Artists/reset:
    post:
      tags:
        - Artist
      summary: Reset password for a user with email.
      operationId: Artist.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Artists/change-password:
    post:
      tags:
        - Artist
      summary: Change a user's password.
      operationId: Artist.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Artists/reset-password:
    post:
      tags:
        - Artist
      summary: Reset user's password via a password-reset token.
      operationId: Artist.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Organizations/{id}/accessTokens/{fk}':
    get:
      tags:
        - Organization
      summary: Find a related item by id for accessTokens.
      operationId: Organization.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Organization
      summary: Delete a related item by id for accessTokens.
      operationId: Organization.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Organization
      summary: Update a related item by id for accessTokens.
      operationId: Organization.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Organizations/{id}/accessTokens':
    get:
      tags:
        - Organization
      summary: Queries accessTokens of Organization.
      operationId: Organization.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Organization
      summary: Creates a new instance in accessTokens of this model.
      operationId: Organization.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Organization
      summary: Deletes all accessTokens of this model.
      operationId: Organization.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Organizations/{id}/accessTokens/count':
    get:
      tags:
        - Organization
      summary: Counts accessTokens of Organization.
      operationId: Organization.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Organizations:
    post:
      tags:
        - Organization
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Organization.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
    patch:
      tags:
        - Organization
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Organization.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
    put:
      tags:
        - Organization
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Organization.replaceOrCreate__put_Organizations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
    get:
      tags:
        - Organization
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Organization.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
      deprecated: false
  /Organizations/replaceOrCreate:
    post:
      tags:
        - Organization
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Organization.replaceOrCreate__post_Organizations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
  /Organizations/upsertWithWhere:
    post:
      tags:
        - Organization
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Organization.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
  '/Organizations/{id}/exists':
    get:
      tags:
        - Organization
      summary: Check whether a model instance exists in the data source.
      operationId: 'Organization.exists__get_Organizations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Organizations/{id}':
    head:
      tags:
        - Organization
      summary: Check whether a model instance exists in the data source.
      operationId: 'Organization.exists__head_Organizations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Organization
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Organization.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
    put:
      tags:
        - Organization
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Organization.replaceById__put_Organizations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
    delete:
      tags:
        - Organization
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Organization.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Organization
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Organization.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
  '/Organizations/{id}/replace':
    post:
      tags:
        - Organization
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Organization.replaceById__post_Organizations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
  /Organizations/findOne:
    get:
      tags:
        - Organization
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Organization.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Organization'
      deprecated: false
  /Organizations/update:
    post:
      tags:
        - Organization
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Organization.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Organizations/count:
    get:
      tags:
        - Organization
      summary: Count instances of the model matched by where from the data source.
      operationId: Organization.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Organizations/change-stream:
    post:
      tags:
        - Organization
      summary: Create a change stream.
      operationId: Organization.createChangeStream__post_Organizations_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Organization
      summary: Create a change stream.
      operationId: Organization.createChangeStream__get_Organizations_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Organizations/login:
    post:
      tags:
        - Organization
      summary: Login a user with username/email and password.
      operationId: Organization.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Organizations/logout:
    post:
      tags:
        - Organization
      summary: Logout a user with access token.
      operationId: Organization.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Organizations/{id}/verify':
    post:
      tags:
        - Organization
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Organization.prototype.verify
      parameters:
        - name: id
          in: path
          description: Organization id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Organizations/confirm:
    get:
      tags:
        - Organization
      summary: Confirm a user registration with identity verification token.
      operationId: Organization.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Organizations/reset:
    post:
      tags:
        - Organization
      summary: Reset password for a user with email.
      operationId: Organization.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Organizations/change-password:
    post:
      tags:
        - Organization
      summary: Change a user's password.
      operationId: Organization.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Organizations/reset-password:
    post:
      tags:
        - Organization
      summary: Reset user's password via a password-reset token.
      operationId: Organization.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Patrons/{id}/accessTokens/{fk}':
    get:
      tags:
        - Patron
      summary: Find a related item by id for accessTokens.
      operationId: Patron.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Patron
      summary: Delete a related item by id for accessTokens.
      operationId: Patron.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Patron
      summary: Update a related item by id for accessTokens.
      operationId: Patron.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Patrons/{id}/accessTokens':
    get:
      tags:
        - Patron
      summary: Queries accessTokens of Patron.
      operationId: Patron.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Patron
      summary: Creates a new instance in accessTokens of this model.
      operationId: Patron.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Patron
      summary: Deletes all accessTokens of this model.
      operationId: Patron.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Patrons/{id}/accessTokens/count':
    get:
      tags:
        - Patron
      summary: Counts accessTokens of Patron.
      operationId: Patron.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Patrons:
    post:
      tags:
        - Patron
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Patron.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
    patch:
      tags:
        - Patron
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Patron.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
    put:
      tags:
        - Patron
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Patron.replaceOrCreate__put_Patrons
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
    get:
      tags:
        - Patron
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Patron.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Patron'
      deprecated: false
  /Patrons/replaceOrCreate:
    post:
      tags:
        - Patron
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Patron.replaceOrCreate__post_Patrons_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
  /Patrons/upsertWithWhere:
    post:
      tags:
        - Patron
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Patron.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
  '/Patrons/{id}/exists':
    get:
      tags:
        - Patron
      summary: Check whether a model instance exists in the data source.
      operationId: 'Patron.exists__get_Patrons_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Patrons/{id}':
    head:
      tags:
        - Patron
      summary: Check whether a model instance exists in the data source.
      operationId: 'Patron.exists__head_Patrons_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Patron
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Patron.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
    put:
      tags:
        - Patron
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Patron.replaceById__put_Patrons_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
    delete:
      tags:
        - Patron
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Patron.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Patron
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Patron.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
  '/Patrons/{id}/replace':
    post:
      tags:
        - Patron
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Patron.replaceById__post_Patrons_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
  /Patrons/findOne:
    get:
      tags:
        - Patron
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Patron.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patron'
      deprecated: false
  /Patrons/update:
    post:
      tags:
        - Patron
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Patron.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Patron'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Patrons/count:
    get:
      tags:
        - Patron
      summary: Count instances of the model matched by where from the data source.
      operationId: Patron.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Patrons/change-stream:
    post:
      tags:
        - Patron
      summary: Create a change stream.
      operationId: Patron.createChangeStream__post_Patrons_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Patron
      summary: Create a change stream.
      operationId: Patron.createChangeStream__get_Patrons_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Patrons/login:
    post:
      tags:
        - Patron
      summary: Login a user with username/email and password.
      operationId: Patron.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Patrons/logout:
    post:
      tags:
        - Patron
      summary: Logout a user with access token.
      operationId: Patron.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Patrons/{id}/verify':
    post:
      tags:
        - Patron
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Patron.prototype.verify
      parameters:
        - name: id
          in: path
          description: Patron id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Patrons/confirm:
    get:
      tags:
        - Patron
      summary: Confirm a user registration with identity verification token.
      operationId: Patron.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Patrons/reset:
    post:
      tags:
        - Patron
      summary: Reset password for a user with email.
      operationId: Patron.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Patrons/change-password:
    post:
      tags:
        - Patron
      summary: Change a user's password.
      operationId: Patron.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Patrons/reset-password:
    post:
      tags:
        - Patron
      summary: Reset user's password via a password-reset token.
      operationId: Patron.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Collectors/{id}/accessTokens/{fk}':
    get:
      tags:
        - Collector
      summary: Find a related item by id for accessTokens.
      operationId: Collector.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Collector
      summary: Delete a related item by id for accessTokens.
      operationId: Collector.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Collector
      summary: Update a related item by id for accessTokens.
      operationId: Collector.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Collectors/{id}/accessTokens':
    get:
      tags:
        - Collector
      summary: Queries accessTokens of Collector.
      operationId: Collector.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Collector
      summary: Creates a new instance in accessTokens of this model.
      operationId: Collector.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Collector
      summary: Deletes all accessTokens of this model.
      operationId: Collector.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Collectors/{id}/accessTokens/count':
    get:
      tags:
        - Collector
      summary: Counts accessTokens of Collector.
      operationId: Collector.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Collectors:
    post:
      tags:
        - Collector
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Collector.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
    patch:
      tags:
        - Collector
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Collector.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
    put:
      tags:
        - Collector
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Collector.replaceOrCreate__put_Collectors
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
    get:
      tags:
        - Collector
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Collector.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Collector'
      deprecated: false
  /Collectors/replaceOrCreate:
    post:
      tags:
        - Collector
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Collector.replaceOrCreate__post_Collectors_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
  /Collectors/upsertWithWhere:
    post:
      tags:
        - Collector
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Collector.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
  '/Collectors/{id}/exists':
    get:
      tags:
        - Collector
      summary: Check whether a model instance exists in the data source.
      operationId: 'Collector.exists__get_Collectors_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Collectors/{id}':
    head:
      tags:
        - Collector
      summary: Check whether a model instance exists in the data source.
      operationId: 'Collector.exists__head_Collectors_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Collector
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Collector.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
    put:
      tags:
        - Collector
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Collector.replaceById__put_Collectors_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
    delete:
      tags:
        - Collector
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Collector.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Collector
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Collector.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
  '/Collectors/{id}/replace':
    post:
      tags:
        - Collector
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Collector.replaceById__post_Collectors_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
  /Collectors/findOne:
    get:
      tags:
        - Collector
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Collector.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Collector'
      deprecated: false
  /Collectors/update:
    post:
      tags:
        - Collector
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Collector.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Collector'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Collectors/count:
    get:
      tags:
        - Collector
      summary: Count instances of the model matched by where from the data source.
      operationId: Collector.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Collectors/change-stream:
    post:
      tags:
        - Collector
      summary: Create a change stream.
      operationId: Collector.createChangeStream__post_Collectors_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Collector
      summary: Create a change stream.
      operationId: Collector.createChangeStream__get_Collectors_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Collectors/login:
    post:
      tags:
        - Collector
      summary: Login a user with username/email and password.
      operationId: Collector.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Collectors/logout:
    post:
      tags:
        - Collector
      summary: Logout a user with access token.
      operationId: Collector.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Collectors/{id}/verify':
    post:
      tags:
        - Collector
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Collector.prototype.verify
      parameters:
        - name: id
          in: path
          description: Collector id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Collectors/confirm:
    get:
      tags:
        - Collector
      summary: Confirm a user registration with identity verification token.
      operationId: Collector.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Collectors/reset:
    post:
      tags:
        - Collector
      summary: Reset password for a user with email.
      operationId: Collector.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Collectors/change-password:
    post:
      tags:
        - Collector
      summary: Change a user's password.
      operationId: Collector.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Collectors/reset-password:
    post:
      tags:
        - Collector
      summary: Reset user's password via a password-reset token.
      operationId: Collector.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Exhibits:
    post:
      tags:
        - Exhibit
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Exhibit.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
    patch:
      tags:
        - Exhibit
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Exhibit.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
    put:
      tags:
        - Exhibit
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Exhibit.replaceOrCreate__put_Exhibits
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
    get:
      tags:
        - Exhibit
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Exhibit.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Exhibit'
      deprecated: false
  /Exhibits/replaceOrCreate:
    post:
      tags:
        - Exhibit
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Exhibit.replaceOrCreate__post_Exhibits_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
  /Exhibits/upsertWithWhere:
    post:
      tags:
        - Exhibit
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Exhibit.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
  '/Exhibits/{id}/exists':
    get:
      tags:
        - Exhibit
      summary: Check whether a model instance exists in the data source.
      operationId: 'Exhibit.exists__get_Exhibits_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Exhibits/{id}':
    head:
      tags:
        - Exhibit
      summary: Check whether a model instance exists in the data source.
      operationId: 'Exhibit.exists__head_Exhibits_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Exhibit
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Exhibit.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
    put:
      tags:
        - Exhibit
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Exhibit.replaceById__put_Exhibits_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
    delete:
      tags:
        - Exhibit
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Exhibit.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Exhibit
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Exhibit.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Exhibit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
  '/Exhibits/{id}/replace':
    post:
      tags:
        - Exhibit
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Exhibit.replaceById__post_Exhibits_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
  /Exhibits/findOne:
    get:
      tags:
        - Exhibit
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Exhibit.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exhibit'
      deprecated: false
  /Exhibits/update:
    post:
      tags:
        - Exhibit
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Exhibit.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Exhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Exhibits/count:
    get:
      tags:
        - Exhibit
      summary: Count instances of the model matched by where from the data source.
      operationId: Exhibit.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Exhibits/change-stream:
    post:
      tags:
        - Exhibit
      summary: Create a change stream.
      operationId: Exhibit.createChangeStream__post_Exhibits_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Exhibit
      summary: Create a change stream.
      operationId: Exhibit.createChangeStream__get_Exhibits_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /GroupExhibits:
    post:
      tags:
        - GroupExhibit
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GroupExhibit.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
    patch:
      tags:
        - GroupExhibit
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: GroupExhibit.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
    put:
      tags:
        - GroupExhibit
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: GroupExhibit.replaceOrCreate__put_GroupExhibits
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
    get:
      tags:
        - GroupExhibit
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GroupExhibit.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GroupExhibit'
      deprecated: false
  /GroupExhibits/replaceOrCreate:
    post:
      tags:
        - GroupExhibit
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: GroupExhibit.replaceOrCreate__post_GroupExhibits_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
  /GroupExhibits/upsertWithWhere:
    post:
      tags:
        - GroupExhibit
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: GroupExhibit.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
  '/GroupExhibits/{id}/exists':
    get:
      tags:
        - GroupExhibit
      summary: Check whether a model instance exists in the data source.
      operationId: 'GroupExhibit.exists__get_GroupExhibits_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GroupExhibits/{id}':
    head:
      tags:
        - GroupExhibit
      summary: Check whether a model instance exists in the data source.
      operationId: 'GroupExhibit.exists__head_GroupExhibits_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GroupExhibit
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GroupExhibit.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
    put:
      tags:
        - GroupExhibit
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'GroupExhibit.replaceById__put_GroupExhibits_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
    delete:
      tags:
        - GroupExhibit
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GroupExhibit.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GroupExhibit
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: GroupExhibit.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: GroupExhibit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
  '/GroupExhibits/{id}/replace':
    post:
      tags:
        - GroupExhibit
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'GroupExhibit.replaceById__post_GroupExhibits_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
  /GroupExhibits/findOne:
    get:
      tags:
        - GroupExhibit
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GroupExhibit.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GroupExhibit'
      deprecated: false
  /GroupExhibits/update:
    post:
      tags:
        - GroupExhibit
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GroupExhibit.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GroupExhibit'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GroupExhibits/count:
    get:
      tags:
        - GroupExhibit
      summary: Count instances of the model matched by where from the data source.
      operationId: GroupExhibit.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GroupExhibits/change-stream:
    post:
      tags:
        - GroupExhibit
      summary: Create a change stream.
      operationId: GroupExhibit.createChangeStream__post_GroupExhibits_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - GroupExhibit
      summary: Create a change stream.
      operationId: GroupExhibit.createChangeStream__get_GroupExhibits_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Projects:
    post:
      tags:
        - Project
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Project.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
    patch:
      tags:
        - Project
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Project.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
    put:
      tags:
        - Project
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Project.replaceOrCreate__put_Projects
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
    get:
      tags:
        - Project
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Project.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
      deprecated: false
  /Projects/replaceOrCreate:
    post:
      tags:
        - Project
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Project.replaceOrCreate__post_Projects_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
  /Projects/upsertWithWhere:
    post:
      tags:
        - Project
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Project.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
  '/Projects/{id}/exists':
    get:
      tags:
        - Project
      summary: Check whether a model instance exists in the data source.
      operationId: 'Project.exists__get_Projects_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Projects/{id}':
    head:
      tags:
        - Project
      summary: Check whether a model instance exists in the data source.
      operationId: 'Project.exists__head_Projects_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Project
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Project.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
    put:
      tags:
        - Project
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Project.replaceById__put_Projects_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
    delete:
      tags:
        - Project
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Project.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Project
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Project.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Project id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
  '/Projects/{id}/replace':
    post:
      tags:
        - Project
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Project.replaceById__post_Projects_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
  /Projects/findOne:
    get:
      tags:
        - Project
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Project.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Project'
      deprecated: false
  /Projects/update:
    post:
      tags:
        - Project
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Project.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Projects/count:
    get:
      tags:
        - Project
      summary: Count instances of the model matched by where from the data source.
      operationId: Project.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Projects/change-stream:
    post:
      tags:
        - Project
      summary: Create a change stream.
      operationId: Project.createChangeStream__post_Projects_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Project
      summary: Create a change stream.
      operationId: Project.createChangeStream__get_Projects_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /AudioVideos:
    post:
      tags:
        - AudioVideo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AudioVideo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
    patch:
      tags:
        - AudioVideo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: AudioVideo.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
    put:
      tags:
        - AudioVideo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AudioVideo.replaceOrCreate__put_AudioVideos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
    get:
      tags:
        - AudioVideo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AudioVideo.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AudioVideo'
      deprecated: false
  /AudioVideos/replaceOrCreate:
    post:
      tags:
        - AudioVideo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AudioVideo.replaceOrCreate__post_AudioVideos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
  /AudioVideos/upsertWithWhere:
    post:
      tags:
        - AudioVideo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: AudioVideo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
  '/AudioVideos/{id}/exists':
    get:
      tags:
        - AudioVideo
      summary: Check whether a model instance exists in the data source.
      operationId: 'AudioVideo.exists__get_AudioVideos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AudioVideos/{id}':
    head:
      tags:
        - AudioVideo
      summary: Check whether a model instance exists in the data source.
      operationId: 'AudioVideo.exists__head_AudioVideos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AudioVideo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AudioVideo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
    put:
      tags:
        - AudioVideo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AudioVideo.replaceById__put_AudioVideos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
    delete:
      tags:
        - AudioVideo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AudioVideo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AudioVideo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: AudioVideo.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: AudioVideo id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
  '/AudioVideos/{id}/replace':
    post:
      tags:
        - AudioVideo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AudioVideo.replaceById__post_AudioVideos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
  /AudioVideos/findOne:
    get:
      tags:
        - AudioVideo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AudioVideo.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AudioVideo'
      deprecated: false
  /AudioVideos/update:
    post:
      tags:
        - AudioVideo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AudioVideo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AudioVideo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AudioVideos/count:
    get:
      tags:
        - AudioVideo
      summary: Count instances of the model matched by where from the data source.
      operationId: AudioVideo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AudioVideos/change-stream:
    post:
      tags:
        - AudioVideo
      summary: Create a change stream.
      operationId: AudioVideo.createChangeStream__post_AudioVideos_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - AudioVideo
      summary: Create a change stream.
      operationId: AudioVideo.createChangeStream__get_AudioVideos_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Works:
    post:
      tags:
        - Work
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Work.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
    patch:
      tags:
        - Work
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Work.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
    put:
      tags:
        - Work
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Work.replaceOrCreate__put_Works
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
    get:
      tags:
        - Work
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Work.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Work'
      deprecated: false
  /Works/replaceOrCreate:
    post:
      tags:
        - Work
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Work.replaceOrCreate__post_Works_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
  /Works/upsertWithWhere:
    post:
      tags:
        - Work
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Work.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
  '/Works/{id}/exists':
    get:
      tags:
        - Work
      summary: Check whether a model instance exists in the data source.
      operationId: 'Work.exists__get_Works_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Works/{id}':
    head:
      tags:
        - Work
      summary: Check whether a model instance exists in the data source.
      operationId: 'Work.exists__head_Works_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Work
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Work.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
    put:
      tags:
        - Work
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Work.replaceById__put_Works_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
    delete:
      tags:
        - Work
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Work.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Work
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Work.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Work id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
  '/Works/{id}/replace':
    post:
      tags:
        - Work
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Work.replaceById__post_Works_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
  /Works/findOne:
    get:
      tags:
        - Work
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Work.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Work'
      deprecated: false
  /Works/update:
    post:
      tags:
        - Work
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Work.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Work'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Works/count:
    get:
      tags:
        - Work
      summary: Count instances of the model matched by where from the data source.
      operationId: Work.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Works/change-stream:
    post:
      tags:
        - Work
      summary: Create a change stream.
      operationId: Work.createChangeStream__post_Works_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Work
      summary: Create a change stream.
      operationId: Work.createChangeStream__get_Works_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Risks:
    post:
      tags:
        - Risk
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Risk.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
    patch:
      tags:
        - Risk
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Risk.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
    put:
      tags:
        - Risk
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Risk.replaceOrCreate__put_Risks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
    get:
      tags:
        - Risk
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Risk.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Risk'
      deprecated: false
  /Risks/replaceOrCreate:
    post:
      tags:
        - Risk
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Risk.replaceOrCreate__post_Risks_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
  /Risks/upsertWithWhere:
    post:
      tags:
        - Risk
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Risk.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
  '/Risks/{id}/exists':
    get:
      tags:
        - Risk
      summary: Check whether a model instance exists in the data source.
      operationId: 'Risk.exists__get_Risks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Risks/{id}':
    head:
      tags:
        - Risk
      summary: Check whether a model instance exists in the data source.
      operationId: 'Risk.exists__head_Risks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Risk
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Risk.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
    put:
      tags:
        - Risk
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Risk.replaceById__put_Risks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
    delete:
      tags:
        - Risk
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Risk.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Risk
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Risk.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Risk id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
  '/Risks/{id}/replace':
    post:
      tags:
        - Risk
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Risk.replaceById__post_Risks_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
  /Risks/findOne:
    get:
      tags:
        - Risk
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Risk.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Risk'
      deprecated: false
  /Risks/update:
    post:
      tags:
        - Risk
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Risk.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Risk'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Risks/count:
    get:
      tags:
        - Risk
      summary: Count instances of the model matched by where from the data source.
      operationId: Risk.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Risks/change-stream:
    post:
      tags:
        - Risk
      summary: Create a change stream.
      operationId: Risk.createChangeStream__post_Risks_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Risk
      summary: Create a change stream.
      operationId: Risk.createChangeStream__get_Risks_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Challenges:
    post:
      tags:
        - Challenge
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Challenge.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
    patch:
      tags:
        - Challenge
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Challenge.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
    put:
      tags:
        - Challenge
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Challenge.replaceOrCreate__put_Challenges
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
    get:
      tags:
        - Challenge
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Challenge.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Challenge'
      deprecated: false
  /Challenges/replaceOrCreate:
    post:
      tags:
        - Challenge
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Challenge.replaceOrCreate__post_Challenges_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
  /Challenges/upsertWithWhere:
    post:
      tags:
        - Challenge
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Challenge.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
  '/Challenges/{id}/exists':
    get:
      tags:
        - Challenge
      summary: Check whether a model instance exists in the data source.
      operationId: 'Challenge.exists__get_Challenges_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Challenges/{id}':
    head:
      tags:
        - Challenge
      summary: Check whether a model instance exists in the data source.
      operationId: 'Challenge.exists__head_Challenges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Challenge
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Challenge.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
    put:
      tags:
        - Challenge
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Challenge.replaceById__put_Challenges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
    delete:
      tags:
        - Challenge
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Challenge.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Challenge
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Challenge.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Challenge id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
  '/Challenges/{id}/replace':
    post:
      tags:
        - Challenge
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Challenge.replaceById__post_Challenges_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
  /Challenges/findOne:
    get:
      tags:
        - Challenge
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Challenge.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Challenge'
      deprecated: false
  /Challenges/update:
    post:
      tags:
        - Challenge
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Challenge.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Challenge'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Challenges/count:
    get:
      tags:
        - Challenge
      summary: Count instances of the model matched by where from the data source.
      operationId: Challenge.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Challenges/change-stream:
    post:
      tags:
        - Challenge
      summary: Create a change stream.
      operationId: Challenge.createChangeStream__post_Challenges_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Challenge
      summary: Create a change stream.
      operationId: Challenge.createChangeStream__get_Challenges_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Needs:
    post:
      tags:
        - Need
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Need.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
    patch:
      tags:
        - Need
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Need.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
    put:
      tags:
        - Need
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Need.replaceOrCreate__put_Needs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
    get:
      tags:
        - Need
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Need.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Need'
      deprecated: false
  /Needs/replaceOrCreate:
    post:
      tags:
        - Need
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Need.replaceOrCreate__post_Needs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
  /Needs/upsertWithWhere:
    post:
      tags:
        - Need
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Need.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
  '/Needs/{id}/exists':
    get:
      tags:
        - Need
      summary: Check whether a model instance exists in the data source.
      operationId: 'Need.exists__get_Needs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Needs/{id}':
    head:
      tags:
        - Need
      summary: Check whether a model instance exists in the data source.
      operationId: 'Need.exists__head_Needs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Need
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Need.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
    put:
      tags:
        - Need
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Need.replaceById__put_Needs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
    delete:
      tags:
        - Need
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Need.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Need
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Need.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Need id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
  '/Needs/{id}/replace':
    post:
      tags:
        - Need
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Need.replaceById__post_Needs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
  /Needs/findOne:
    get:
      tags:
        - Need
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Need.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Need'
      deprecated: false
  /Needs/update:
    post:
      tags:
        - Need
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Need.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Need'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Needs/count:
    get:
      tags:
        - Need
      summary: Count instances of the model matched by where from the data source.
      operationId: Need.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Needs/change-stream:
    post:
      tags:
        - Need
      summary: Create a change stream.
      operationId: Need.createChangeStream__post_Needs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Need
      summary: Create a change stream.
      operationId: Need.createChangeStream__get_Needs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Offers:
    post:
      tags:
        - Offer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Offer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
    patch:
      tags:
        - Offer
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Offer.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
    put:
      tags:
        - Offer
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Offer.replaceOrCreate__put_Offers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
    get:
      tags:
        - Offer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Offer.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Offer'
      deprecated: false
  /Offers/replaceOrCreate:
    post:
      tags:
        - Offer
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Offer.replaceOrCreate__post_Offers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
  /Offers/upsertWithWhere:
    post:
      tags:
        - Offer
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Offer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
  '/Offers/{id}/exists':
    get:
      tags:
        - Offer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Offer.exists__get_Offers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Offers/{id}':
    head:
      tags:
        - Offer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Offer.exists__head_Offers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Offer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Offer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
    put:
      tags:
        - Offer
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Offer.replaceById__put_Offers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
    delete:
      tags:
        - Offer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Offer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Offer
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Offer.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Offer id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
  '/Offers/{id}/replace':
    post:
      tags:
        - Offer
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Offer.replaceById__post_Offers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
  /Offers/findOne:
    get:
      tags:
        - Offer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Offer.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Offer'
      deprecated: false
  /Offers/update:
    post:
      tags:
        - Offer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Offer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Offer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Offers/count:
    get:
      tags:
        - Offer
      summary: Count instances of the model matched by where from the data source.
      operationId: Offer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Offers/change-stream:
    post:
      tags:
        - Offer
      summary: Create a change stream.
      operationId: Offer.createChangeStream__post_Offers_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Offer
      summary: Create a change stream.
      operationId: Offer.createChangeStream__get_Offers_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Rewards:
    post:
      tags:
        - Reward
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Reward.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
    patch:
      tags:
        - Reward
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Reward.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
    put:
      tags:
        - Reward
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Reward.replaceOrCreate__put_Rewards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
    get:
      tags:
        - Reward
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Reward.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Reward'
      deprecated: false
  /Rewards/replaceOrCreate:
    post:
      tags:
        - Reward
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Reward.replaceOrCreate__post_Rewards_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
  /Rewards/upsertWithWhere:
    post:
      tags:
        - Reward
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Reward.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
  '/Rewards/{id}/exists':
    get:
      tags:
        - Reward
      summary: Check whether a model instance exists in the data source.
      operationId: 'Reward.exists__get_Rewards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Rewards/{id}':
    head:
      tags:
        - Reward
      summary: Check whether a model instance exists in the data source.
      operationId: 'Reward.exists__head_Rewards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Reward
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Reward.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
    put:
      tags:
        - Reward
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Reward.replaceById__put_Rewards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
    delete:
      tags:
        - Reward
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Reward.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Reward
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Reward.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Reward id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
  '/Rewards/{id}/replace':
    post:
      tags:
        - Reward
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Reward.replaceById__post_Rewards_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
  /Rewards/findOne:
    get:
      tags:
        - Reward
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Reward.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reward'
      deprecated: false
  /Rewards/update:
    post:
      tags:
        - Reward
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Reward.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Reward'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Rewards/count:
    get:
      tags:
        - Reward
      summary: Count instances of the model matched by where from the data source.
      operationId: Reward.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Rewards/change-stream:
    post:
      tags:
        - Reward
      summary: Create a change stream.
      operationId: Reward.createChangeStream__post_Rewards_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Reward
      summary: Create a change stream.
      operationId: Reward.createChangeStream__get_Rewards_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /VernissageRewards:
    post:
      tags:
        - VernissageReward
      summary: Create a new instance of the model and persist it into the data source.
      operationId: VernissageReward.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
    patch:
      tags:
        - VernissageReward
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: VernissageReward.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
    put:
      tags:
        - VernissageReward
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: VernissageReward.replaceOrCreate__put_VernissageRewards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
    get:
      tags:
        - VernissageReward
      summary: Find all instances of the model matched by filter from the data source.
      operationId: VernissageReward.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VernissageReward'
      deprecated: false
  /VernissageRewards/replaceOrCreate:
    post:
      tags:
        - VernissageReward
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: VernissageReward.replaceOrCreate__post_VernissageRewards_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
  /VernissageRewards/upsertWithWhere:
    post:
      tags:
        - VernissageReward
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: VernissageReward.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
  '/VernissageRewards/{id}/exists':
    get:
      tags:
        - VernissageReward
      summary: Check whether a model instance exists in the data source.
      operationId: 'VernissageReward.exists__get_VernissageRewards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/VernissageRewards/{id}':
    head:
      tags:
        - VernissageReward
      summary: Check whether a model instance exists in the data source.
      operationId: 'VernissageReward.exists__head_VernissageRewards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - VernissageReward
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: VernissageReward.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
    put:
      tags:
        - VernissageReward
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'VernissageReward.replaceById__put_VernissageRewards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
    delete:
      tags:
        - VernissageReward
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: VernissageReward.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - VernissageReward
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: VernissageReward.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: VernissageReward id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
  '/VernissageRewards/{id}/replace':
    post:
      tags:
        - VernissageReward
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'VernissageReward.replaceById__post_VernissageRewards_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
  /VernissageRewards/findOne:
    get:
      tags:
        - VernissageReward
      summary: Find first instance of the model matched by filter from the data source.
      operationId: VernissageReward.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VernissageReward'
      deprecated: false
  /VernissageRewards/update:
    post:
      tags:
        - VernissageReward
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: VernissageReward.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VernissageReward'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /VernissageRewards/count:
    get:
      tags:
        - VernissageReward
      summary: Count instances of the model matched by where from the data source.
      operationId: VernissageReward.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /VernissageRewards/change-stream:
    post:
      tags:
        - VernissageReward
      summary: Create a change stream.
      operationId: >-
        VernissageReward.createChangeStream__post_VernissageRewards_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - VernissageReward
      summary: Create a change stream.
      operationId: VernissageReward.createChangeStream__get_VernissageRewards_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Notes:
    post:
      tags:
        - Note
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Note.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    patch:
      tags:
        - Note
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Note.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    put:
      tags:
        - Note
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Note.replaceOrCreate__put_Notes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    get:
      tags:
        - Note
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Note.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
      deprecated: false
  /Notes/replaceOrCreate:
    post:
      tags:
        - Note
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Note.replaceOrCreate__post_Notes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /Notes/upsertWithWhere:
    post:
      tags:
        - Note
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Note.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  '/Notes/{id}/exists':
    get:
      tags:
        - Note
      summary: Check whether a model instance exists in the data source.
      operationId: 'Note.exists__get_Notes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Notes/{id}':
    head:
      tags:
        - Note
      summary: Check whether a model instance exists in the data source.
      operationId: 'Note.exists__head_Notes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Note
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Note.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    put:
      tags:
        - Note
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Note.replaceById__put_Notes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    delete:
      tags:
        - Note
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Note.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Note
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Note.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Note id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  '/Notes/{id}/replace':
    post:
      tags:
        - Note
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Note.replaceById__post_Notes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /Notes/findOne:
    get:
      tags:
        - Note
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Note.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /Notes/update:
    post:
      tags:
        - Note
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Note.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Notes/count:
    get:
      tags:
        - Note
      summary: Count instances of the model matched by where from the data source.
      operationId: Note.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Notes/change-stream:
    post:
      tags:
        - Note
      summary: Create a change stream.
      operationId: Note.createChangeStream__post_Notes_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Note
      summary: Create a change stream.
      operationId: Note.createChangeStream__get_Notes_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Campaigns:
    post:
      tags:
        - Campaign
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Campaign.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
    patch:
      tags:
        - Campaign
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Campaign.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
    put:
      tags:
        - Campaign
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Campaign.replaceOrCreate__put_Campaigns
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
    get:
      tags:
        - Campaign
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Campaign.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Campaign'
      deprecated: false
  /Campaigns/replaceOrCreate:
    post:
      tags:
        - Campaign
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Campaign.replaceOrCreate__post_Campaigns_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
  /Campaigns/upsertWithWhere:
    post:
      tags:
        - Campaign
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Campaign.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
  '/Campaigns/{id}/exists':
    get:
      tags:
        - Campaign
      summary: Check whether a model instance exists in the data source.
      operationId: 'Campaign.exists__get_Campaigns_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Campaigns/{id}':
    head:
      tags:
        - Campaign
      summary: Check whether a model instance exists in the data source.
      operationId: 'Campaign.exists__head_Campaigns_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Campaign
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Campaign.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
    put:
      tags:
        - Campaign
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Campaign.replaceById__put_Campaigns_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
    delete:
      tags:
        - Campaign
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Campaign.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Campaign
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Campaign.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Campaign id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
  '/Campaigns/{id}/replace':
    post:
      tags:
        - Campaign
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Campaign.replaceById__post_Campaigns_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
  /Campaigns/findOne:
    get:
      tags:
        - Campaign
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Campaign.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Campaign'
      deprecated: false
  /Campaigns/update:
    post:
      tags:
        - Campaign
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Campaign.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Campaign'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Campaigns/count:
    get:
      tags:
        - Campaign
      summary: Count instances of the model matched by where from the data source.
      operationId: Campaign.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Campaigns/change-stream:
    post:
      tags:
        - Campaign
      summary: Create a change stream.
      operationId: Campaign.createChangeStream__post_Campaigns_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Campaign
      summary: Create a change stream.
      operationId: Campaign.createChangeStream__get_Campaigns_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
tags:
  - name: GeoLocation
  - name: Category
  - name: Artist
  - name: Organization
  - name: Patron
  - name: Collector
  - name: Exhibit
  - name: GroupExhibit
  - name: Project
  - name: AudioVideo
  - name: Work
  - name: Risk
  - name: Challenge
  - name: Need
  - name: Offer
  - name: Reward
  - name: VernissageReward
  - name: Note
  - name: Campaign
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  GeoLocation:
    properties:
      city:
        type: string
      zipcode:
        type: string
      address:
        type: string
      long:
        default: lat
        type: string
      lat:
        type: string
      id:
        type: number
        format: double
    required:
      - city
      - zipcode
    additionalProperties: false
  x-any:
    properties: {}
  Category:
    properties:
      category:
        type: array
        items:
          type: string
      id:
        type: number
        format: double
    required:
      - category
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  Artist:
    properties:
      degree:
        type: string
      yearCompleted:
        type: string
        format: date-time
      peaceOfStudy:
        $ref: '#/definitions/GeoLocation'
      follows:
        type: array
        items:
          $ref: '#/definitions/Member'
      joined:
        type: string
        format: date-time
      phone:
        type: string
      shortIntroduction:
        type: string
      about:
        type: string
      websiteUrl:
        type: string
      geoLocation:
        $ref: '#/definitions/GeoLocation'
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - joined
      - email
    additionalProperties: false
  Organization:
    properties:
      vernissageGroup:
        type: array
        items:
          $ref: '#/definitions/VernissageGroup'
      follows:
        type: array
        items:
          $ref: '#/definitions/Member'
      joined:
        type: string
        format: date-time
      phone:
        type: string
      shortIntroduction:
        type: string
      about:
        type: string
      websiteUrl:
        type: string
      geoLocation:
        $ref: '#/definitions/GeoLocation'
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - joined
      - email
    additionalProperties: false
  Patron:
    properties:
      vernissageGroup:
        type: array
        items:
          $ref: '#/definitions/VernissageGroup'
      follows:
        type: array
        items:
          $ref: '#/definitions/Member'
      joined:
        type: string
        format: date-time
      phone:
        type: string
      shortIntroduction:
        type: string
      about:
        type: string
      websiteUrl:
        type: string
      geoLocation:
        $ref: '#/definitions/GeoLocation'
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - joined
      - email
    additionalProperties: false
  Collector:
    properties:
      vernissageGroup:
        type: array
        items:
          $ref: '#/definitions/VernissageGroup'
      follows:
        type: array
        items:
          $ref: '#/definitions/Member'
      joined:
        type: string
        format: date-time
      phone:
        type: string
      shortIntroduction:
        type: string
      about:
        type: string
      websiteUrl:
        type: string
      geoLocation:
        $ref: '#/definitions/GeoLocation'
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - joined
      - email
    additionalProperties: false
  Exhibit:
    properties:
      title:
        type: string
      location:
        $ref: '#/definitions/GeoLocation'
      year:
        type: string
        format: date-time
      id:
        type: number
        format: double
    additionalProperties: false
  GroupExhibit:
    properties:
      title:
        type: string
      location:
        $ref: '#/definitions/GeoLocation'
      year:
        type: string
        format: date-time
      id:
        type: number
        format: double
    additionalProperties: false
  Project:
    properties:
      title:
        type: string
      description:
        type: string
      style:
        $ref: '#/definitions/Style'
      medium:
        $ref: '#/definitions/Medium'
      id:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  AudioVideo:
    properties:
      url:
        type: string
      title:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  Work:
    properties:
      caption:
        type: string
      audioVideo:
        type: array
        items:
          $ref: '#/definitions/AudioVideo'
      id:
        type: number
        format: double
    additionalProperties: false
  Risk:
    properties:
      title:
        type: string
      description:
        type: string
      id:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  Challenge:
    properties:
      title:
        type: string
      description:
        type: string
      id:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  Need:
    properties:
      title:
        type: string
      description:
        type: string
      id:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  Offer:
    properties:
      title:
        type: string
      description:
        type: string
      id:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  Reward:
    properties:
      title:
        type: string
      description:
        type: string
      estimatedDelivery:
        type: string
        format: date-time
      shippingDetails:
        $ref: '#/definitions/ShippingDetail'
      LimitQuantity:
        default: false
        type: boolean
      pledgeAmount:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - title
      - LimitQuantity
    additionalProperties: false
  VernissageReward:
    properties:
      title:
        type: string
      description:
        type: string
      estimatedDelivery:
        type: string
        format: date-time
      shippingDetails:
        $ref: '#/definitions/ShippingDetail'
      LimitQuantity:
        default: false
        type: boolean
      pledgeAmount:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - title
      - LimitQuantity
    additionalProperties: false
  Note:
    properties:
      description:
        type: string
      id:
        type: number
        format: double
    required:
      - description
    additionalProperties: false
  Campaign:
    properties:
      campaignStatus:
        $ref: '#/definitions/CampaignStatus'
      fundingGoal:
        type: number
        format: double
      duration:
        type: string
        format: date-time
      startDate:
        type: string
        format: date-time
      endDate:
        type: string
        format: date-time
      fundingGoalCurrency:
        default: USD
        type: string
      title:
        type: string
      description:
        type: string
      vernissageDate:
        type: string
        format: date-time
      categories:
        type: array
        items:
          $ref: '#/definitions/Category'
      risk:
        type: array
        items:
          $ref: '#/definitions/Risk'
      challenges:
        type: array
        items:
          $ref: '#/definitions/Challenge'
      needs:
        type: array
        items:
          $ref: '#/definitions/Need'
      offers:
        type: array
        items:
          $ref: '#/definitions/Offer'
      rewards:
        type: array
        items:
          $ref: '#/definitions/Reward'
      notes:
        type: array
        items:
          $ref: '#/definitions/Note'
      vernissageGroups:
        type: array
        items:
          $ref: '#/definitions/VernissageGroup'
      funding:
        $ref: '#/definitions/Funding'
      id:
        type: number
        format: double
    required:
      - campaignStatus
      - fundingGoal
      - fundingGoalCurrency
      - title
      - description
      - funding
    additionalProperties: false
  Member:
    properties:
      follows:
        type: array
        items:
          $ref: '#/definitions/Member'
      joined:
        type: string
        format: date-time
      phone:
        type: string
      shortIntroduction:
        type: string
      about:
        type: string
      websiteUrl:
        type: string
      geoLocation:
        $ref: '#/definitions/GeoLocation'
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - joined
      - email
    additionalProperties: false
